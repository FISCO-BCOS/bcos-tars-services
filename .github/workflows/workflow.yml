name: FISCO-BCOS GitHub Actions
on:
  push:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  release:
    types: [published, created, edited]
env:
  CCACHE_DIR: ${{ github.workspace }}/ccache

jobs:
  build_with_clang:
    name: build_with_clang
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /Users/runner/.hunter/
            deps/src
            ccache
          key: hunter-clang-v4-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-clang-v4-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-clang-v4-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-clang-v4-notest-${{ runner.temp }}-
      - name: install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install ccache
      - name: install Ubuntu dependencies
        if: runner.os == 'Linux'
        run: sudo apt install -y git curl build-essential clang cmake ccache libzstd-dev
      - name: configure
        if: runner.os == 'macOS'
        run: export SDKROOT=$(xcrun --sdk macosx --show-sdk-path) && CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake . -DTESTS=ON
      - name: configure
        if: runner.os == 'Linux'
        run: CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake . -DTESTS=ON
      - name: compile
        run: make -j4
      - name: run test
        run: CTEST_OUTPUT_ON_FAILURE=TRUE make test
  build_with_gcc:
    name: build_with_gcc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /Users/runner/.hunter/
            deps/src
            ccache
          key: hunter-gcc-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-gcc-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-gcc-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-gcc-v3-notest-${{ runner.temp }}-
      - name: install Ubuntu dependencies
        run: sudo apt install -y libzstd-dev git curl build-essential cmake ccache
      - name: configure
        run: cmake . -DTESTS=ON
      - name: compile
        run: make -j4
      - name: run test
        run: CTEST_OUTPUT_ON_FAILURE=TRUE make test
  ubuntu18_04_build_with_gcc:
    name: ubuntu18_04_build_with_gcc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /Users/runner/.hunter/
            deps/src
            ccache
          key: hunter-ubuntu-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-ubuntu-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-ubuntu-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-ubuntu-v3-notest-${{ runner.temp }}-
      - name: install Ubuntu dependencies
        run: sudo apt-get install -y git curl build-essential cmake ccache lcov libzstd-dev
      - name: configure
        run: cmake . -DTESTS=ON -DCOVERAGE=ON
      - name: compile
        run: make -j4
      - name: run test
        run: CTEST_OUTPUT_ON_FAILURE=TRUE make test
      - name: generate coverage
        run: make coverage
      - name: upload code coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.info
          name: bcos-tars-services coverage
          fail_ci_if_error: true
  build_with_centos:
    name: build_with_centos
    runs-on: ubuntu-latest
    container:
      image: docker.io/centos:7
      volumes:
        - /github/home/.hunter:/github/home/.hunter
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /github/home/.hunter
            deps/src
            ccache
          key: hunter-centos-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-centos-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-centos-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-centos-v3-notest-${{ runner.temp }}-
      - name: install CentOS dependencies
        run: |
          yum install -y epel-release centos-release-scl
          yum install -y git make gcc gcc-c++ glibc-static glibc-devel cmake3 ccache devtoolset-7 libzstd-devel && source /opt/rh/devtoolset-7/enable
          alias cmake='cmake3'
      - name: configure and compile
        run: |
          source /opt/rh/devtoolset-7/enable
          # mkdir -p build && cd build
          cmake3 . -DTESTS=ON
          make -j4
          CTEST_OUTPUT_ON_FAILURE=TRUE make test
